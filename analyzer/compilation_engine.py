"""Compilation engine module of the compiler

Classes:
    CompilationEngine
"""

import sys

from constants import TerminalElement


class CompilationEngine:
    """CompilationEngine class of the Jack compiler.

    Emits a structured representation of the input source code
    wrapped in XML tags.

    Gets input from a Tokenizer and emits output to a file.
    Output is generated by a series of compile_xxx functions, each designed to
    handle the compilation of a specific Jack langugage construct xxx.
    Each compile_xxx function should get from the input, and handle,
    all the tokens that make up xxx, advance the Tokenizer exactly beyond these
    tokens, and output the parsing of xxx.

    Properties:
        input: input stream of tokens
        output: file object of the output

    Methods:
        compile_class() -> None
    """

    def __init__(self, tokenizer, filename):
        self.input = tokenizer
        self.output = open(filename, 'w')

    def __del__(self):
        self.output.close()

    def _eat(self, token):
        token_type = getattr(TerminalElement, self.input.token_type())

        if self.input.current_token != token:
            print('Invalid token.')
            sys.exit(1)
        else:
            if token == '<':
                token = '&lt;'
            elif token == '>':
                token = '&gt;'
            elif token == '&':
                token = '&amp;'

            self.output.write(f'<{token_type}> {token} </{token_type}>\n')
            self.input.advance()

    def compile_class(self):
        """Compile a complete class"""
        self.output.write('<class>\n',)
        self._eat('class')
        self._eat(self.input.current_token)
        self._eat('{')
        self.compile_class_var_dec()
        self.compile_subroutine()
        self._eat('}')
        self.output.write('</class>\n')

    def compile_class_var_dec(self):
        pass

    def compile_subroutine(self):
        pass
